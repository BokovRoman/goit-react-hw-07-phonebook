{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Section/Section.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Section","title","children","className","styles","container","text","protoTypes","PropTypes","string","isRequired","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","getIsLoading","state","contacts","loading","getFilterValue","filter","getContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","INITIAL_STATE","number","ContactForm","handleChange","target","value","setState","handleSubmit","e","preventDefault","includesContact","props","find","onSubmit","reset","alert","this","form","label","input","type","pattern","required","onChange","button","Component","connect","dispatch","a","actions","post","data","addContact","onDeleteContact","id","delete","status","removeContact","list","map","item","onClick","App","fetchContacts","isLoading","get","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f61cc37a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__2e0nH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Section_text__27ZgB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__fSe5J\",\"input\":\"Filter_input__3_Epr\"};","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport styles from './Section.module.css';\r\n\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2 className={styles.text}>{title}\r\n            </h2>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nSection.protoTypes = {\r\n    title:PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Section;","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/AddContactRequest');\r\nexport const addContactSuccess = createAction('contacts/AddContactSuccess');\r\nexport const addContactError = createAction('contacts/AddContactError');\r\n\r\nexport const removeContactRequest = createAction('contacts/RemoveContactRequest');\r\nexport const removeContactSuccess = createAction('contacts/RemoveContactSuccess');\r\nexport const removeContactError = createAction('contacts/RemoveContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');","import axios from 'axios';\r\nimport * as actions from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:8888/';\r\n\r\nexport const fetchContactsRequest = () => async dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(actions.fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.removeContactError(error));\r\n  }\r\n\r\n  //   axios\r\n  //     .get('/contacts')\r\n  //     .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n  //     .catch(error => actions.fetchContactsError(error));\r\n};\r\n\r\nexport const addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(actions.addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(actions.addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(actions.addContactError(error));\r\n  }\r\n\r\n  //   axios\r\n  //     .post('/contacts', contact)\r\n  //     .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n  //     .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nexport const removeContact = id => async dispatch => {\r\n  dispatch(actions.removeContactRequest());\r\n\r\n  try {\r\n    const response = await axios.delete(`/contacts/${id}`);\r\n\r\n    if (response.status === 200) {\r\n      dispatch(actions.removeContactSuccess(id));\r\n    }\r\n  } catch (error) {\r\n    dispatch(actions.removeContactError(error));\r\n  }\r\n\r\n  //   axios\r\n  //     .delete(`/contacts/${id}`)\r\n  //     .then(() => dispatch(actions.removeContactSuccess(id)))\r\n  //     .catch(error => dispatch(actions.removeContactError(error)));\r\n};","  \r\nimport { createSelector } from '@reduxjs/toolkit';\r\nexport const getIsLoading = state => state.contacts.loading;\r\nexport const getFilterValue = state => state.contacts.filter;\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilterValue],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n  },\r\n);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport styles from './ContactForm.module.css';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nconst INITIAL_STATE = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  // handleSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   const { name, number } = this.state;\r\n  //   this.props.onSubmit(name, number);\r\n  //   this.reset();\r\n  // };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    const includesContact = contacts.find((contact) => contact.name === name);\r\n\r\n    if (!includesContact) {\r\n      this.props.onSubmit(name, number);\r\n      this.reset();\r\n      return;\r\n    }\r\n\r\n    alert(`${includesContact.name} is already in contacts`);\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n        <form className={styles.form} onSubmit={this.handleSubmit}>\r\n            <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport styles from './ContactList.module.css';\r\n\r\nimport { removeContact } from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\n\r\nconst ContactList = ({contacts, onDeleteContact}) => {\r\n    return (\r\n        <ul className={styles.list}>\r\n            {contacts.map(({id,name,number})=> (\r\n                    <li key={id} className={styles.item}>\r\n                    <p>{name}: {number}</p>\r\n                    <button className={styles.button} type=\"button\"\r\n                    onClick={() => onDeleteContact(id)}>Delete</button>\r\n                    </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n        .isRequired,\r\n    })\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\r\nimport { getFilterValue } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport styles from './Filter.module.css';\r\n\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label className={styles.label}>\r\n    Find contacts by name\r\n    <input\r\n        className={styles.input}\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    ></input>\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilterValue(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Section from './components/Section/Section';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n// import Loader from './components/Loader';\nimport { fetchContactsRequest } from './redux/contacts/contacts-operations';\nimport { getIsLoading } from './redux/contacts/contacts-selectors';\n\nclass App extends Component {\n  state = {};\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div>\n        <Section title=\"Phonebook\">\n          {this.props.isLoading}\n          <ContactForm />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter />\n          <ContactList />\n        </Section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: getIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(fetchContactsRequest()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [actions.fetchContactsRequest]: () => true,\r\n  [actions.fetchContactsSuccess]: () => false,\r\n  [actions.fetchContactsError]: () => false,\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n  [actions.removeContactRequest]: () => true,\r\n  [actions.removeContactSuccess]: () => false,\r\n  [actions.removeContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2EoNA\",\"label\":\"ContactForm_label__2duC1\",\"button\":\"ContactForm_button__1I29H\"};"],"sourceRoot":""}